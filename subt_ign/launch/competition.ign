<?xml version="1.0"?>
<!-- Usage: ign launch competition.ign circuit:=<circuitName> worldName:=<worldName>
             [robotName1:=<robotName> robotConfig1:=<robotConfig>
             robotName2:=<robotName> robotConfig2:=<robotConfig>
             marsupial1:=<robotName>:<robotName>
             ... ]

    circuitName should be one of {cave, tunnel, urban}
    The [robotNameX] command line argument is optional, where X can be 1 to 20

    Example that loads cave circuit world with an X2 robot with configuration 3

      ign launch competition.ign circuit:=cave worldName:=simple_cave_01
          robotName1:=X2_3 robotConfig1:=X2_SENSOR_CONFIG_3
-->

<%
  # Needed for adding marsupial robots
  require "rexml/document"
%>

<%
  # Library of functions for worlds
  require File.dirname(__FILE__) + "/world_common_defs.rb"

  # Library for spawning the builtin robots
  require File.dirname(__FILE__) + "/robot_spawners.rb"
%>

<%
  # When 'enableGroundTruth = true' absolute poses of vehicles will be published.
  # This is useful for debugging purposes, but will not be available during
  # competition scoring.

  # Check if enableGroundTruith is not defined or is empty/nil
  if !defined?(enableGroundTruth) || enableGroundTruth == nil || enableGroundTruth.empty?
    $enableGroundTruth = false
  else
    $enableGroundTruth = enableGroundTruth
  end

  # Check if circuit is not defined or is empty/nil
  # Also make sure the given circuit name is valid
  if !defined?(circuit) || circuit == nil || circuit.empty?
    abort("circuit was not defined, exiting now")
  elsif $validCircuits.include?(circuit)
    $circuit = circuit
  else
    abort("circuit given is not valid. Please choose from #{$validCircuits}")
  end

  if !defined?(logPath) || logPath == nil || logPath.empty?
    $logPath = '/tmp/ign/logs'
  else
    $logPath = logPath
  end
%>

<%
  # Check if worldName is not defined or is empty/nil
  if !defined?(worldName) || worldName == nil || worldName.empty?
    abort("worldName was not defined, exiting now")
  else
    $worldName = worldName
  end

  if !defined?(headless) || headless == nil || headless.empty?
    $headless = false
  elsif headless == 'true' || headless == 'True' || headless == '1'
    $headless = true
  end

  # Check if durationSec is not defined or is empty/nil. In this case, set
  # durationSec to zero, which equals to an infinite run time.
  if !defined?(durationSec) || durationSec == nil || durationSec.empty?
    $durationSec = 0
  else
    $durationSec = durationSec
  end

  # If localModel is set, the model URI will use a local path to the model with
  # the assumption that the model is installed in the same workspace as the
  # launch file. This only applies to models submitted by teams.
  if !defined?(localModel) || localModel == nil || localModel.empty?
    $localModel = false
  else
    $localModel = localModel
  end
%>

<%
  world = World.new($worldName)
%>

<%
  $levels = world.levels
  if defined?(levels) && levels != nil && !levels.empty?
    $levels = levels.downcase == "true"
  end
%>

<%
  robots = parseRobotArgs(binding)
  marsupialParents = parseMarsupials(binding, robots)
%>

<ignition version='1.0'>
  <%= world.commonLaunchEnvironment() %>

  <!-- Start ROS first. This is a bit hacky for now. -->
  <!-- Make sure to source /opt/ros/melodic/setup.bash -->
  <executable name='ros'>
    <command>roslaunch subt_ros competition_init.launch world_name:=<%=$worldName%> vehicle_topics:=<%=(robots.empty?)?"1":"0"%> enable_ground_truth:=<%=($enableGroundTruth)?"1":"0"%> robot_names:=<%= robots.keys.join(",") %></command>
  </executable>

  <plugin name="ignition::launch::GazeboServer"
          filename="libignition-launch-gazebo.so">
    <world_file><%= world.path %></world_file>
    <%if defined?(updateRate) && updateRate != nil && !updateRate.empty?%>
    <update_rate><%= updateRate %></update_rate>
    <%end%>
    <run>true</run>
    <levels><%= $levels %></levels>
    <record>
      <enabled>true</enabled>
      <path><%= $logPath %></path>
      <overwrite>true</overwrite>
    </record>
    <%if defined?(seed) && seed != nil && !seed.empty?%>
    <seed><%= seed %></seed>
    <%end%>

    <%= world.commonServerPlugins() %>
    <%= world.subtServerPlugins($durationSec, $logPath, false) %>
  </plugin>

  <%= world.subtLaunchPlugins() %>

  <%if !$headless %>
  <executable_wrapper>
    <%= world.guiPlugin() %>
  </executable_wrapper>
  <%end%>

<plugin name="ignition::launch::GazeboFactory"
        filename="libignition-launch-gazebo-factory.so">
<%
  world.assignSpawnPositions(robots, marsupialParents)

  # Reverse hash of marsupials, i.e, key: child, value: parent
  marsupialChildren = marsupialParents.invert

  # Spawn nonmarsupial and parent marsupial robots first. Then spawn child
  # marsupials since they need the positions of their parents
  spawnList = robots.select { |name| not marsupialChildren.has_key?(name) }.values +
              robots.select { |name| marsupialChildren.has_key?(name) }.values

  teamBaseSpawned = false
  allExecutables = ""

  spawnList.each do |robot|
    name = robot.name
    config = robot.config

    spawnStringTmp, executables = spawnRobot(robot, world, $localModel)

    if config.upcase == "TEAMBASE"
      if !teamBaseSpawned
        teamBaseSpawned = true
      else
        puts "Error: Only 1 teambase is allowed. Skpping[%s]." % [name]
        next
      end
    end

    if executables != nil
      allExecutables += executables
    end

    if marsupialParents.has_key?(name)
      childModelName = marsupialParents[name]
      parentModelName = marsupialChildren[childModelName]

      joints, platform, rosExecutable = getMarsupialSnippets(
        robot, robots[childModelName], $worldName)

      allExecutables += rosExecutable

      # Wrap the temporary spawn string with a root element. This is needed
      # because the xml parser needs a root element. When we're adding the
      # plugin, we print only the contents of the root element.
      spawnXml = REXML::Document.new("<ignition>#{spawnStringTmp}</ignition>")
      search = "//spawn[@name='#{name}']"
      pluginElem = spawnXml.root.elements[search]
      includeElem = pluginElem.elements['sdf/include']
      joints.each { |joint| includeElem.add_element(joint.root) }

      spawnString = ""
      formatter = REXML::Formatters::Default.new
      spawnXml.root.each { |el| formatter.write(el, spawnString) }
      spawnString += platform
    else
      spawnString = spawnStringTmp
    end
%>
    <%= spawnString%>
<%
  end
%>
</plugin>

<%= allExecutables %>

</ignition>
