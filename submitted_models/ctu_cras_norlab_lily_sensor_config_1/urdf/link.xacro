<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
  <!-- NOTE: joint must match the name of the module -->
  <xacro:macro name="link" params="name child type:=X5 input:=RightAngle output:=RightAngle extension twist contact:=0">
    <xacro:property name="mass" value="${0.4 * (extension + 0.03) + 0.26}"/>
    <xacro:property name="edge_to_center" value="${.02}"/>
    <link name="${name}/INPUT_INTERFACE">
      <!-- Input Cap -->
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <xacro:if value="${input == 'RightAngle'}">
            <mesh filename="package://ctu_cras_norlab_lily_sensor_config_1/meshes/A-2038-02.stl"/>
          </xacro:if>
          <xacro:if value="${input == 'Inline'}">
            <mesh filename="package://ctu_cras_norlab_lily_sensor_config_1/meshes/A-2225-01.stl" scale="0.001 0.001 0.001"/>
          </xacro:if>
        </geometry>
        <xacro:black_material/>
      </visual>

      <xacro:if value="${input == 'RightAngle'}">
        <!-- OLD MESH -->
        <!--
        <collision>
          <origin xyz="0 0 0" rpy="0 0 0" />
          <geometry> 
            <mesh filename="package://ctu_cras_norlab_lily_sensor_config_1/meshes/A-2038-02.stl"/>
          </geometry>
        </collision>
        -->

        <!-- geometry simplification from file: A-2038-02.scad-->
        <!-- AUTOGENERATED from Openscad using openscad2xacro.py -->
        <!--  horizontal connector -->
        <collision>
          <origin xyz="0.0 0.0 0.005" rpy="0 0 0"/>
          <geometry>
            <cylinder length="0.011" radius="0.025" />
          </geometry>
        </collision>
        <!--  vertical connector -->
        <collision>
          <origin xyz="0.025 0.0 0.02" rpy="0 0 0"/>
          <geometry>
            <box size="0.0251 0.05 0.041" />
          </geometry>
        </collision>
        <!-- AUTOGENERATION from Openscad using openscad2xacro.py ENDS HERE -->

      </xacro:if>

      <xacro:if value="${input == 'Inline'}">
        <collision>
          <origin xyz="0 0 0" rpy="0 0 0" />
          <geometry>
            <mesh filename="package://ctu_cras_norlab_lily_sensor_config_1/meshes/A-2225-01.stl" scale="0.001 0.001 0.001"/>
          </geometry>
        </collision>
      </xacro:if>


      <!-- Link Pipe -->
      <visual>
        <xacro:if value="${input == 'RightAngle'}">
          <origin xyz="${extension/2} 0 ${edge_to_center}" rpy="0 1.57075 0" />
        </xacro:if>
        <xacro:if value="${input == 'Inline'}">
          <origin xyz="0 0 ${extension/2}" rpy="0 0 0" />
        </xacro:if>
        <geometry>
          <cylinder length="${extension-.0254}" radius=".016" />
        </geometry>
        <xacro:black_material/>
      </visual>
      <collision>
        <xacro:if value="${input == 'RightAngle'}">
          <origin xyz="${extension/2} 0 ${edge_to_center}" rpy="0 1.57075 0" />
        </xacro:if>
        <xacro:if value="${input == 'Inline'}">
          <origin xyz="0 0 ${extension/2}" rpy="0 0 0" />
        </xacro:if>
        <geometry>
          <cylinder length="${extension-.0254}" radius=".016" />
        </geometry>
      </collision>

      <!-- Output Cap -->
      <visual>
        <xacro:if value="${input == 'RightAngle' and output == 'RightAngle'}">
          <origin xyz="${extension} ${sin(-twist) * edge_to_center} ${edge_to_center * (1 + cos(-twist))}" rpy="${-twist} 0 0"/>
        </xacro:if>
        <xacro:if value="${input == 'RightAngle' and output == 'Inline'}">
          <origin xyz="${extension} 0 ${edge_to_center}" rpy="${pi/2} ${twist+pi} ${pi/2}"/>
        </xacro:if>
        <xacro:if value="${input == 'Inline' and output =='RightAngle'}">
          <origin xyz="${edge_to_center * sin(twist+pi/2)} ${edge_to_center * -cos(twist+pi/2)} ${extension}" rpy="${pi/2} ${-pi/2} ${twist+pi/2}"/>
        </xacro:if>
        <xacro:if value="${input == 'Inline' and output =='Inline'}">
          <origin xyz="${0} ${0} ${extension}" rpy="${0} ${0} ${twist-pi/2}"/>
        </xacro:if>
        <geometry>
          <xacro:if value="${output == 'RightAngle'}">
            <mesh filename="package://ctu_cras_norlab_lily_sensor_config_1/meshes/A-2039-02.stl"/>
          </xacro:if>
          <xacro:if value="${output == 'Inline'}">
            <mesh filename="package://ctu_cras_norlab_lily_sensor_config_1/meshes/A-2226-01.stl" scale="0.001 0.001 0.001"/>
          </xacro:if>
        </geometry>
        <xacro:black_material/>
      </visual>

      <!-- COLLISION -->
      <!-- merged from automatically generated results-->
      <!-- (1/2) horizontal connector -->
      <collision>
        <xacro:if value="${input == 'RightAngle' and output == 'RightAngle'}">
          <!-- origin manually offseted by xyz="0.0 0.0 -0.005" -->
          <origin xyz="${extension-0.005} ${sin(-twist) * edge_to_center} ${edge_to_center * (1 + cos(-twist))}" rpy="${-twist} 0 0"/>
        </xacro:if>
        <xacro:if value="${input == 'RightAngle' and output == 'Inline'}">
          <!-- origin manually offseted by xyz="0.0 0.0 -0.005" -->
          <origin xyz="${extension-0.005} 0 ${edge_to_center}" rpy="${pi/2} ${twist+pi} ${pi/2}"/>
        </xacro:if>
        <xacro:if value="${input == 'Inline' and output =='RightAngle'}">
          <origin xyz="${edge_to_center * sin(twist+pi/2)} ${edge_to_center * -cos(twist+pi/2)} ${extension}" rpy="${pi/2} ${-pi/2} ${twist+pi/2}"/>
        </xacro:if>
        <xacro:if value="${input == 'Inline' and output =='Inline'}">
          <origin xyz="${0} ${0} ${extension}" rpy="${0} ${0} ${twist-pi/2}"/>
        </xacro:if>
        <geometry>
          <xacro:if value="${input == 'RightAngle'}">
            <!--
            <mesh filename="package://ctu_cras_norlab_lily_sensor_config_1/meshes/A-2039-02.stl"/>
            -->
            <!-- adding cylinder -->
            <cylinder length="0.011" radius="0.035" />
          </xacro:if>
          <xacro:if value="${input == 'Inline'}">
            <mesh filename="package://ctu_cras_norlab_lily_sensor_config_1/meshes/A-2226-01.stl" scale="0.001 0.001 0.001"/>
          </xacro:if>
        </geometry>
      </collision>

      <!-- (2/2) horizontal connector -->
      <collision>
        <xacro:if value="${input == 'RightAngle' and output == 'RightAngle'}">
          <!-- origin manually offseted by xyz="-0.025 0.0 -0.02" -->
          <origin xyz="${extension-0.025} ${sin(-twist) * edge_to_center} ${edge_to_center * (1 + cos(-twist)) -0.02}" rpy="${-twist} 0 0"/>
        </xacro:if>
        <xacro:if value="${input == 'RightAngle' and output == 'Inline'}">
          <!-- origin manually offseted by xyz="-0.025 0.0 -0.02" -->
          <origin xyz="${extension-0.025} 0 ${edge_to_center-0.02}" rpy="${pi/2} ${twist+pi} ${pi/2}"/>
        </xacro:if>
        <geometry>
          <xacro:if value="${input == 'RightAngle'}">
            <!--
            <mesh filename="package://ctu_cras_norlab_lily_sensor_config_1/meshes/A-2039-02.stl"/>
            -->
            <!-- adding box -->
            <box size="0.025 0.05 0.041" />
          </xacro:if>
        </geometry>
      </collision>
      <!-- end of merge from automatically generated results-->

      <!-- Approximate inertia as thin rod about x axis -->
      <inertial>
        <origin xyz="${extension/2} 0 ${edge_to_center}" rpy="0 0 0" />
        <mass value="${mass}"/>
        <inertia  ixx="0.0" ixy="0.0"  ixz="0.0"  iyy="${mass * extension * extension / 12.0}"  iyz="0.0"  izz="${mass * extension * extension / 12.0}"/>
      </inertial>
    </link>
    <gazebo reference="${name}/INPUT_INTERFACE">
      <xacro:gazebo_black_material/>
    </gazebo>
    <xacro:if value="${contact}">
      <!-- collision for logical contact -->
      <gazebo reference="${name}/INPUT_INTERFACE">
        <sensor name="contact" type="contact">
          <contact>
            <collision>${name}/INPUT_INTERFACE_collision</collision>
            <collision>${name}/INPUT_INTERFACE_collision_1</collision>
            <collision>${name}/INPUT_INTERFACE_collision_2</collision>
            <collision>${name}/INPUT_INTERFACE_collision_3</collision>
            <collision>${name}/INPUT_INTERFACE_collision_4</collision>
          </contact>
        </sensor>
        <collision>
          <surface>
            <contact>
              <ode>
                <kp>1e+10</kp>
                <kd>1</kd>
              </ode>
            </contact>
            <friction>
              <ode>
                <mu>10.0</mu>
                <!--<mu2>10.0</mu2>-->
              </ode>
            </friction>
          </surface>
        </collision>
      </gazebo>
    </xacro:if>

    <joint name="${name}/OUTPUT_JOINT" type="fixed">
      <parent link="${name}/INPUT_INTERFACE"/>
      <child link="${child}/INPUT_INTERFACE"/>
      <xacro:if value="${input == 'RightAngle' and output == 'RightAngle'}">
        <origin xyz="${extension} ${-sin(twist) * edge_to_center} ${edge_to_center * (1 + cos(twist))}" rpy="${twist} 0 0"/>
      </xacro:if>
      <xacro:if value="${input == 'RightAngle' and output == 'Inline'}">
        <origin xyz="${extension} 0 ${edge_to_center}" rpy="${pi/2} ${twist+pi} ${pi/2}"/>
      </xacro:if>
      <xacro:if value="${input == 'Inline' and output =='RightAngle'}">
        <origin xyz="${edge_to_center * sin(twist+pi/2)} ${edge_to_center * -cos(twist+pi/2)} ${extension}" rpy="${pi/2} ${-pi/2} ${twist+pi/2}"/>
      </xacro:if>
      <xacro:if value="${input == 'Inline' and output =='Inline'}">
        <origin xyz="${0} ${0} ${extension}" rpy="${0} ${0} ${twist-pi/2}"/>
      </xacro:if>
    </joint>
    <gazebo reference="${name}/OUTPUT_JOINT">
      <disableFixedJointLumping>true</disableFixedJointLumping>
      <preserveFixedJoint>true</preserveFixedJoint>
    </gazebo>
  </xacro:macro>
</robot>

